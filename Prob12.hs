-- The sequence of triangle numbers is generated by adding the natural numbers. 
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
-- The first ten terms would be:

-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

-- Let us list the factors of the first seven triangle numbers:

--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
-- We can see that 28 is the first triangle number to have over five divisors.

-- What is the value of the first triangle number to have over five hundred divisors?

import Control.Monad.State hiding (guard)
import Control.Monad.List (guard)

type Term = Int
type Accumulator = Int
type TriangleNum = Int

getTriangleNum :: Term -> State Accumulator TriangleNum
getTriangleNum n = do
           acc <- get
           let newAcc = acc + n
           put newAcc
           return newAcc

generateTriangleNum :: [TriangleNum]
generateTriangleNum = evalState (mapM getTriangleNum [1..]) 0

getDivisors :: Int -> [Int]
getDivisors n = do
		k <- [1..n]
		guard (n `mod` k == 0)
		return k

hasNDivisors :: Int -> Int -> Bool
n `hasNDivisors` k = length divisors > k where
	divisors = getDivisors n

answer = head $ filter (`hasNDivisors` 500) generateTriangleNum
